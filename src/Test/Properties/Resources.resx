<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlwaysFails" xml:space="preserve">
    <value>Always fails</value>
  </data>
  <data name="AlwaysSucceeds" xml:space="preserve">
    <value>Always succeeds</value>
  </data>
  <data name="CanFindAnchor" xml:space="preserve">
    <value>Can find anchor</value>
  </data>
  <data name="CanFindBody" xml:space="preserve">
    <value>Can find body</value>
  </data>
  <data name="CanFindExactlyOneInputElement" xml:space="preserve">
    <value>Can find exactly one input element</value>
  </data>
  <data name="CanFindLamasMainByClass" xml:space="preserve">
    <value>Can find Lamas' main by class</value>
  </data>
  <data name="CannotFindAnchorWhichIsNotDivLike" xml:space="preserve">
    <value>Cannot find anchor (because it is not div-like)</value>
  </data>
  <data name="CannotFindExactlyOneInputElement" xml:space="preserve">
    <value>Cannot find exactly one input element</value>
  </data>
  <data name="CanOnlyRunTestCasesWithRealWebView" xml:space="preserve">
    <value>Test cases can only be run using real web view</value>
  </data>
  <data name="NoResultReceived" xml:space="preserve">
    <value>No result received</value>
  </data>
  <data name="ResultIsInconclusive" xml:space="preserve">
    <value>Result is inconclusive</value>
  </data>
  <data name="ScriptCallFailedButWrongErrorMessage" xml:space="preserve">
    <value>Script call failed as expected, but not with error message "{0}"</value>
  </data>
  <data name="ScriptCallFailedTechnically" xml:space="preserve">
    <value>Script call failed technically</value>
  </data>
  <data name="ScriptCallFailureExpected" xml:space="preserve">
    <value>Script call succeeded, expected failure with error message "{0}"</value>
  </data>
  <data name="ScriptCallSucceededButDomElementDoesNotHaveClass" xml:space="preserve">
    <value>Script call succeeded, but dom element does not have class "{0}"</value>
  </data>
  <data name="ScriptCallSucceededButMisMatchInNthOfClass" xml:space="preserve">
    <value>Script call succeeded, but there is a mismatch in NthOfClass</value>
  </data>
  <data name="ScriptCallSucceededButNoDomElement" xml:space="preserve">
    <value>Script call succeeded, but no dom element with classes was returned</value>
  </data>
  <data name="ScriptCallSucceededButNoNthOfClass" xml:space="preserve">
    <value>Script call succeeded, but dom element does not have NthOfClass</value>
  </data>
  <data name="TestCaseFailed" xml:space="preserve">
    <value>Test case failed</value>
  </data>
  <data name="TestCaseSucceeded" xml:space="preserve">
    <value>Test case succeeded</value>
  </data>
  <data name="WebViewWindowTitle" xml:space="preserve">
    <value>Web View Window</value>
  </data>
</root>